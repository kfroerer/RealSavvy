'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeHandle = exports.getPage = undefined;

require('es6-promise');

require('isomorphic-fetch');

function booleanToInt(value) {
  return value === true ? '1' : '0';
}

function getHost(preview) {
  var baseHost = process.env.SITE_BUILDER_API || process.env.SITE_BUILDER_HOST;
  var cacheHost = process.env.SITE_BUILDER_API_WITH_CACHE || baseHost;
  return preview ? baseHost : cacheHost;
}

function buildUrl(siteId, path, preview) {
  var base = preview ? "/api/preview" : '/api/sites/' + siteId + '/preview';
  var _path = path.charAt(0) == '/' ? path + '' : '/' + path;

  return '' + getHost(preview) + base + _path;
}

function getThemeHandle(siteId) {
  var url = buildUrl(siteId, '_show', false);

  console.log('[API][' + siteId + '] getThemeHandle ' + url);

  return fetch(url, { headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Site-Builder-Site-Id': siteId
    } }).then(function (response) {
    if (response.status < 400) return response.json();else throw new Error('[API][' + siteId + '] Bad response from server ' + response.status);
  }).then(function (json) {
    return json.site.theme_handle;
  });
}

function getPage(siteId, path, previewEnabled, contentEditing) {
  var url = buildUrl(siteId, path, previewEnabled);

  console.log('[API][' + siteId + '] getPage ' + url);

  return fetch(url, { headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Site-Builder-Site-Id': siteId,
      'X-Site-Builder-Preview': booleanToInt(previewEnabled),
      'X-Site-Builder-Content-Editing': booleanToInt(contentEditing)
    } }).then(function (response) {
    if (response.status < 400) return response.json();else throw new Error('[API][' + siteId + '] Bad response from server ' + response.status);
  });
}

exports.getPage = getPage;
exports.getThemeHandle = getThemeHandle;