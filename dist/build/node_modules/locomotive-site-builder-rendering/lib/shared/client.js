'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _html = require('./components/html');

var _events = require('./client/events');

var _scrolling = require('./client/scrolling');

var _buttons = require('./client/buttons');

var Buttons = _interopRequireWildcard(_buttons);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isContentEditingEnabled() {
  return window.SiteBuilder.options.content_editing;
}

function disableLinks() {
  document.addEventListener('click', function (event) {
    var el = event.target;

    while (el && el.nodeName != 'A') {
      el = el.parentElement;
    }

    if (el !== undefined && el !== null) {
      var url = el.getAttribute('href') || '';
      if (url !== '' && !url.startsWith('#')) {
        alert("You are not allowed to visit another page in the preview mode.");
        event.preventDefault() && event.stopPropagation();
      }
    }
  });
}

function getData() {
  return new Promise(function (resolve, reject) {
    if (window.__PRELOADED__DATA__ === undefined) throw new Error('[Client] no initial state');

    var data = JSON.parse(decodeURIComponent(window.atob(window.__PRELOADED__DATA__)));

    // the page options won't be modified when editing the content of a page
    window.SiteBuilder.options = data.options;

    resolve(data);
  });
}

function logError(err) {
  console.log('[Client] error found: ' + err);
  console.log(err.stack);
}

function renderPage(data) {
  var _window$SiteBuilder = window.SiteBuilder,
      env = _window$SiteBuilder.env,
      theme = _window$SiteBuilder.theme,
      assetHost = _window$SiteBuilder.assetHost;

  // data won't never include the options key because
  // the SiteBuilder Editor doesn't pass it to the preview iframe.

  data.options = window.SiteBuilder.options;

  return new Promise(function (resolve, reject) {
    _reactDom2.default.hydrate(_react2.default.createElement(_html.HTMLComponent, {
      definitions: theme,
      data: data,
      env: env,
      assetHost: assetHost
    }), document, function () {
      resolve(data);
    });
  });
}

function renderExistingPage(data) {
  renderPage(data).then(function (data) {
    if (isContentEditingEnabled()) Buttons.insertAll();
  }).catch(logError);
}

function setupEvents() {
  (0, _events.listenEvents)({
    page_modified: renderExistingPage,
    site_modified: renderExistingPage,
    editing_block: function editing_block(data) {
      (0, _scrolling.scrollToBlock)(data.block.id);
    },
    editing_list_item: function editing_list_item(data) {
      (0, _events.emitEvent)('editing_list_item', { item: data.item });
    },
    editing_tab: function editing_tab(data) {
      (0, _events.emitEvent)('editing_tab', { tab: data.tab });
    }
  });
}

function render() {
  document.addEventListener('DOMContentLoaded', function (event) {
    getData().then(function (data) {
      return renderPage(data);
    }).then(function (data) {
      if (isContentEditingEnabled()) {
        Buttons.insertAll();
        disableLinks();
      }
      setupEvents();
    }).catch(logError);
  });
}

exports.render = render;