'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _block = require('./common/block');

var _block2 = _interopRequireDefault(_block);

var _list = require('./common/list');

var _list2 = _interopRequireDefault(_list);

var _text = require('./common/text');

var _text2 = _interopRequireDefault(_text);

var _link = require('./common/link');

var _link2 = _interopRequireDefault(_link);

var _svg_symbol = require('./common/svg_symbol');

var _svg_symbol2 = _interopRequireDefault(_svg_symbol);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TopPanel01 = function (_React$Component) {
  _inherits(TopPanel01, _React$Component);

  function TopPanel01() {
    _classCallCheck(this, TopPanel01);

    return _possibleConstructorReturn(this, (TopPanel01.__proto__ || Object.getPrototypeOf(TopPanel01)).apply(this, arguments));
  }

  _createClass(TopPanel01, [{
    key: 'renderBrand',
    value: function renderBrand(content) {
      var name = content.brand === null || content.brand.length === 0 ? this.props.site.name : content.brand;
      return _react2.default.createElement(
        'span',
        { className: 'brand' },
        name
      );
    }

    // TODO

  }, {
    key: 'renderSocialLinks',
    value: function renderSocialLinks(list) {
      /*
      <ul className="social">
                <li><a href="#">{this.svgSymbol('twitter')}</a></li>
                <li><a href="#">{this.svgSymbol('facebook')}</a></li>
                <li><a href="#">{this.svgSymbol('googlePlus')}</a></li>
                <li><a href="#">{this.svgSymbol('pinterest')}</a></li>
              </ul>
      */
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      $(window).on('load resize ready', window.registerResizeEventForPanel.bind($(this.panel)));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      $(window).off('load resize ready', window.registerResizeEventForPanel.bind($(this.panel)));
    }
  }, {
    key: 'showFirstSlide',
    value: function showFirstSlide(event) {
      if (this.props.blocks.length > 1) window.changeSlide(1);
    }
  }, {
    key: 'changeSlide',
    value: function changeSlide(blockId) {
      for (var i = 0, position = 1; i < this.props.blocks.length; i++) {
        var block = this.props.blocks[i];

        if (block.type.match(/^slide_/)) {
          if (block.id === blockId.replace('#', '')) {
            window.changeSlide(position);
            return;
          } else position++;
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var content = this.props.block.content;

      return _react2.default.createElement(
        _block2.default,
        { tag: 'div', block: this.props.block, disableButtons: true },
        _react2.default.createElement(
          'nav',
          { className: 'panel top forceMobileView', ref: function ref(panel) {
              _this2.panel = panel;
            }, id: 'top' },
          _react2.default.createElement(
            'div',
            { className: 'sections desktop' },
            _react2.default.createElement(
              'div',
              { className: 'left' },
              _react2.default.createElement(
                'a',
                { onClick: this.showFirstSlide.bind(this) },
                this.renderBrand(content)
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'center' },
              _react2.default.createElement(
                _list2.default,
                { tag: 'ul', className: 'menu', list: content.links },
                function (element, key) {
                  return _react2.default.createElement(
                    'li',
                    { key: key },
                    _react2.default.createElement(
                      'a',
                      { onClick: _this2.changeSlide.bind(_this2, element.url) },
                      element.label
                    )
                  );
                }
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'right' },
              _react2.default.createElement(_link2.default, { className: 'button menuButton', value: content.rightLink })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'sections compact hidden' },
            _react2.default.createElement(
              'div',
              { className: 'left' },
              _react2.default.createElement(
                'a',
                { onClick: this.showFirstSlide.bind(this) },
                this.renderBrand(content)
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'right' },
              _react2.default.createElement(
                'span',
                { className: 'button actionButton sidebarTrigger', 'data-sidebar-id': this.props.block.id },
                _react2.default.createElement(_svg_symbol2.default, { symbol: 'menu' })
              )
            )
          )
        ),
        _react2.default.createElement(
          'nav',
          { className: 'sidebar ' + content.backgroundColor, 'data-sidebar-id': this.props.block.id },
          _react2.default.createElement(
            'div',
            { className: 'close' },
            _react2.default.createElement(_svg_symbol2.default, { symbol: 'close' })
          ),
          _react2.default.createElement(
            'div',
            { className: 'content' },
            _react2.default.createElement(
              'a',
              { onClick: this.showFirstSlide.bind(this) },
              this.renderBrand(content)
            ),
            _react2.default.createElement(
              _list2.default,
              { tag: 'ul', className: 'mainMenu uppercase', list: content.links },
              function (element, key) {
                return _react2.default.createElement(
                  'li',
                  { key: key },
                  _react2.default.createElement(
                    'a',
                    { href: element.url },
                    element.label
                  )
                );
              }
            )
          )
        )
      );
    }
  }]);

  return TopPanel01;
}(_react2.default.Component);

exports.default = TopPanel01;