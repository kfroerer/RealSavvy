'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildApp = undefined;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _context = require('../shared/context');

var _context2 = _interopRequireDefault(_context);

var _custom_routes = require('../shared/custom_routes');

var _custom_routes2 = _interopRequireDefault(_custom_routes);

var _hosts = require('./hosts');

var _page = require('./page');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderMaintenancePage(response, message) {
  console.log('[App] Render the maintenance page, reason: ' + message);
  response.redirect(302, '/maintenance.html');
}

function buildContext(request, themes, siteId, path, previewEnabled) {
  return (0, _context2.default)(request, themes, {
    siteId: siteId,
    path: path,
    previewEnabled: previewEnabled,
    contentEditing: request.query.contentEditing === '1',
    loadAllFonts: request.query.load_all_fonts === '1',
    staticMarkup: request.query.static === '1'
  });
}

function buildErrorPage(err) {
  console.log('[App] Unable to process the request, reason: ' + err);
  console.log(err);

  return err.status !== undefined ? err : { status: 302, location: '/500.html' };
}

function render(response, context) {
  switch (context.status) {
    case 302:
    case 301:
      response.redirect(context.status, context.location);
      break;
    default:
      response.set({ 'Content-Type': context.contentType });
      response.status(context.status);
      response.send(context.body);
  }
}

function buildApp(dirname, themes, routes) {
  var app = (0, _express2.default)();

  app.use(_express2.default.static(_path2.default.join(dirname, 'public')));
  app.use((0, _morgan2.default)('dev'));
  app.use(_bodyParser2.default.urlencoded({ extended: true }));

  /* === PREVIEW MODE === */

  /* ___custom routes___ */
  Object.keys(routes).forEach(function (route) {
    var callRouteHandler = routes[route];

    console.log('Adding custom route: /_preview/:siteId/' + route);

    app.get('/_preview/:siteId/' + route, function (req, res) {
      var path = req.originalUrl.replace('/_preview/' + req.params.siteId, '');

      buildContext(req, themes, req.params.siteId, path, true).then(_page.loadThemeHandle).then(callRouteHandler).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
        return render(res, context);
      });
    });
  });

  /* ___dynamic routes___ */
  app.get(/^\/_preview\/([^\/]+)(\/(.*))?$/, function (req, res) {
    buildContext(req, themes, req.params[0], req.params[2], true).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
      return render(res, context);
    });
  });

  /* === CUSTOM DOMAIN MODE === */

  /* ___custom routes___ */
  Object.keys(routes).forEach(function (route) {
    var callRouteHandler = routes[route];

    console.log('Adding custom route: /' + route);

    app.get('/' + route, function (req, res) {
      buildContext(req, themes, (0, _hosts.getHostname)(req), req.originalUrl, false).then(_page.loadThemeHandle).then(callRouteHandler).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
        return render(res, context);
      });
    });
  });

  /* ___dynamic routes___ */
  app.get(/^\/(.*)?$/, function (req, res) {
    console.log('[Routing] ' + (0, _hosts.getHostname)(req));

    if ((0, _hosts.isLocalhost)(req)) renderMaintenancePage(res, 'Default or main domain requested');else buildContext(req, themes, (0, _hosts.getHostname)(req), req.params[0], false).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
      return render(res, context);
    });
  });

  return app;
}

exports.buildApp = buildApp;