'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadThemeHandle = exports.buildPage = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _html = require('../shared/components/html');

var _api = require('./api');

var _is_blank = require('../utils/is_blank');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildHTML(context, mountedOn, data) {
  var themes = context.themes,
      themeHandle = context.themeHandle,
      staticMarkup = context.staticMarkup,
      previewEnabled = context.previewEnabled,
      contentEditing = context.contentEditing,
      loadAllFonts = context.loadAllFonts,
      externalData = context.externalData;

  var _render = staticMarkup ? _server.renderToStaticMarkup : _server.renderToString;

  data.options = Object.assign({}, { externalData: externalData }, data.options, {
    preview: previewEnabled,
    mounted_on: mountedOn,
    content_editing: contentEditing,
    load_all_fonts: loadAllFonts
  });

  return context.render('<!DOCTYPE html>' + _render(_react2.default.createElement(_html.HTMLComponent, {
    definitions: themes[themeHandle],
    data: data,
    env: 'production',
    assetHost: process.env.SITE_BUILDER_ASSET_HOST
  })), data.status, data.content_type);
}

function loadPage(context) {
  var siteId = context.siteId,
      path = context.path,
      previewEnabled = context.previewEnabled,
      contentEditing = context.contentEditing;


  return (0, _api.getPage)(siteId, path, previewEnabled, contentEditing).then(function (data) {
    var _siteId = data.site ? data.site.id : siteId;

    context.data = data;
    context.themeHandle = data.site ? data.site.theme_handle : context.themeHandle;
    context.mountedOn = previewEnabled ? '/_preview/' + _siteId : '';;

    return context;
  });
}

function buildPageHTML(context) {
  var mountedOn = context.mountedOn,
      data = context.data;


  if (!(0, _is_blank.isBlank)(data.location)) return context.redirectTo(data.location, data.status);else if (!(0, _is_blank.isBlank)(data.body)) return context.render(data.body, data.status, data.content_type);else return buildHTML(context, mountedOn, data);
}

function buildPage(context) {
  if (context.isRendered()) return context;

  return loadPage(context).then(buildPageHTML);
}

function loadThemeHandle(context) {
  return (0, _api.getThemeHandle)(context.siteId).then(function (themeHandle) {
    context.themeHandle = themeHandle;
    return context;
  });
}

exports.buildPage = buildPage;
exports.loadThemeHandle = loadThemeHandle;