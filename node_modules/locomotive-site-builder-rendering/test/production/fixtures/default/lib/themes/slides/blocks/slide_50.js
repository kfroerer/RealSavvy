'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _block = require('./common/block');

var _block2 = _interopRequireDefault(_block);

var _list = require('./common/list');

var _list2 = _interopRequireDefault(_list);

var _text = require('./common/text');

var _text2 = _interopRequireDefault(_text);

var _link = require('./common/link');

var _link2 = _interopRequireDefault(_link);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
  slide_50 block (type: slide_50)

  Fields:
    - title (string). Example: "var value = this.props.block.content.title;"
    - subtitle (text). Example: "var value = this.props.block.content.subtitle;"
    - items (list). Example: "var value = this.props.block.content.items;"

  If your field is a string, you need to call the dangerouslySetInnerHTML method in your tag to prevent ReactJS to stop the rendering of the block for security reason. Example:

    var html = this.props.block.content.headline;
    <h1 className="text-center" dangerouslySetInnerHTML={{ __html: htmlContent }} />
*/

var Slide50 = function (_React$Component) {
  _inherits(Slide50, _React$Component);

  function Slide50() {
    _classCallCheck(this, Slide50);

    return _possibleConstructorReturn(this, (Slide50.__proto__ || Object.getPrototypeOf(Slide50)).apply(this, arguments));
  }

  _createClass(Slide50, [{
    key: 'backgroundStyle',
    value: function backgroundStyle(content) {
      return {
        "backgroundImage": 'url(' + this.props.assetPath(content.background) + ')'
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var content = this.props.block.content;

      return _react2.default.createElement(
        _block2.default,
        { tag: 'section', className: 'slide fade kenBurns', block: this.props.block },
        _react2.default.createElement(
          'div',
          { className: 'content' },
          _react2.default.createElement(
            'div',
            { className: 'container' },
            _react2.default.createElement(
              'div',
              { className: 'wrap' },
              _react2.default.createElement(
                'div',
                { className: 'fix-12-12' },
                _react2.default.createElement(
                  'div',
                  { className: 'fix-10-12 toCenter' },
                  _react2.default.createElement(_text2.default, { tag: 'h1', className: 'small ae-1', value: content.title }),
                  _react2.default.createElement(
                    'div',
                    { className: 'ae-2' },
                    _react2.default.createElement(_text2.default, { tag: 'p', value: content.subtitle })
                  )
                ),
                _react2.default.createElement(
                  _list2.default,
                  { tag: 'ul', className: 'grid center equal', list: content.items },
                  function (item, key) {
                    return _react2.default.createElement(
                      'li',
                      { key: key, className: 'col-4-12 template-cell-8 ae-5 equalElement' },
                      _react2.default.createElement(_text2.default, { tag: 'h3', className: 'uppercase ae-6', value: item.title }),
                      _react2.default.createElement(
                        'div',
                        { className: 'ae-7' },
                        _react2.default.createElement(_text2.default, { tag: 'p', className: 'small', value: item.description })
                      )
                    );
                  }
                )
              )
            )
          )
        ),
        _react2.default.createElement('div', { className: 'background', style: this.backgroundStyle(content) })
      );
    }
  }]);

  return Slide50;
}(_react2.default.Component);

exports.default = Slide50;