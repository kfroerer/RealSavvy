'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildApp = undefined;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _context = require('../shared/context');

var _context2 = _interopRequireDefault(_context);

var _api = require('./api');

var _page = require('./page');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function buildContext(request, themes, dirname) {
  return (0, _context2.default)(request, themes, {
    dirname: dirname,
    themeHandle: request.params.handle
  });
}

function buildErrorPage(err) {
  console.log('[App] Unable to process the request, reason: ' + err);
  console.log(err);

  return err.status !== undefined ? err : { status: 500 };
}

function render(response, context) {
  switch (context.status) {
    case 302:
    case 301:
      response.redirect(context.status, context.location);
      break;
    case 500:
      response.render('error');
      break;
    default:
      response.status(context.status);
      response.send(context.body);
  }
}

function buildApp(dirname, themes, routes) {
  var app = (0, _express2.default)();

  app.set('views', _path2.default.join(__dirname, '..', '..', 'lib', 'views'));
  app.set('view engine', 'ejs');

  app.use(_express2.default.static(_path2.default.join(dirname, 'public')));
  app.use((0, _morgan2.default)('dev'));
  app.use(_bodyParser2.default.urlencoded({ extended: true }));

  app.get('/', function (req, res) {
    res.redirect('/themes');
  });

  app.get('/themes', function (req, res) {
    (0, _api.getProject)(dirname).then(function (project) {
      res.render('index', project);
    });
  });

  app.get('/themes/debug/:handle', function (req, res) {
    buildContext(req, themes, dirname).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
      return render(res, context);
    });
  });

  app.get('/themes/:handle', function (req, res) {
    buildContext(req, themes, dirname).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
      return render(res, context);
    });
  });

  /* ___custom routes ___*/
  Object.keys(routes).forEach(function (route) {
    var callRouteHandler = routes[route];

    console.log('Adding custom route: ' + route + ' | url: /themes/:handle/' + route);

    app.get('/themes/:handle/' + route, function (req, res) {
      buildContext(req, themes, dirname).then(callRouteHandler).then(_page.buildPage).catch(buildErrorPage).then(function (context) {
        return render(res, context);
      });
    });
  });

  return app;
}

exports.buildApp = buildApp;