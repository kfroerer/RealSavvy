'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _error_boundary = require('./error_boundary');

var _error_boundary2 = _interopRequireDefault(_error_boundary);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Page = function (_React$Component) {
  _inherits(Page, _React$Component);

  function Page() {
    _classCallCheck(this, Page);

    return _possibleConstructorReturn(this, (Page.__proto__ || Object.getPrototypeOf(Page)).apply(this, arguments));
  }

  _createClass(Page, [{
    key: 'renderBlocks',
    value: function renderBlocks() {
      var site = this.props.site;
      var page = this.props.page;
      var definitions = this.props.definitions;
      var options = this.props.options;
      var assetPath = this.props.assetPath;
      var urlTo = this.props.urlTo;
      var blocks = this.props.page.content.blocks;
      var editing = this.props.contentEditing;
      var sortedBlocks = blocks.sort(function (a, b) {
        return a.position - b.position;
      });

      return sortedBlocks.map(function (block, index) {
        var Child = definitions[block.type];
        var blockId = 'site-builder-block-' + (block.id || index);

        if (typeof Child === 'undefined') return _react2.default.createElement(
          'div',
          { key: blockId, style: { textAlign: 'center', background: 'red', padding: '5px 10px', color: '#fff' } },
          'Unknown block ',
          block.type
        );else return _react2.default.createElement(
          _error_boundary2.default,
          { key: 'error-boundary-' + blockId },
          _react2.default.createElement(Child, {
            key: blockId,
            site: site,
            page: page,
            options: options,
            definitions: definitions,
            block: block,
            blocks: blocks,
            assetPath: assetPath,
            contentEditing: editing,
            urlTo: urlTo })
        );
      }.bind(this));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { id: 'site-builder-page' },
        this.renderBlocks()
      );
    }
  }]);

  return Page;
}(_react2.default.Component);

exports.default = Page;