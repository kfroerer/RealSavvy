'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonGroup = function (_React$Component) {
  _inherits(ButtonGroup, _React$Component);

  function ButtonGroup() {
    _classCallCheck(this, ButtonGroup);

    return _possibleConstructorReturn(this, (ButtonGroup.__proto__ || Object.getPrototypeOf(ButtonGroup)).apply(this, arguments));
  }

  _createClass(ButtonGroup, [{
    key: 'groupStyle',
    value: function groupStyle() {
      return {
        zIndex: 999999,
        position: 'absolute',
        bottom: '20px',
        right: '20px'
      };
    }
  }, {
    key: 'buttonStyle',
    value: function buttonStyle() {
      return {
        background: 'rgba(0, 0, 0, 0.6)',
        color: '#fff',
        padding: '5px 10px',
        cursor: 'pointer',
        textTransform: 'uppercase',
        fontSize: '10px',
        lineHeight: '17px',
        margin: '0px 5px'
      };
    }
  }, {
    key: 'handleClick',
    value: function handleClick(type) {
      this.props.handleClick(type, this.props.blockId);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { id: this.props.domId, style: this.groupStyle() },
        _react2.default.createElement(
          'a',
          { onClick: this.handleClick.bind(this, 'edit_block'),
            style: this.buttonStyle() },
          'edit'
        ),
        this.props.enableAddBtn && _react2.default.createElement(
          'a',
          { onClick: this.handleClick.bind(this, 'add_block'),
            style: this.buttonStyle() },
          'add block'
        )
      );
    }
  }]);

  return ButtonGroup;
}(_react2.default.Component);

exports.default = ButtonGroup;