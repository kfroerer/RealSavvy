'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProject = exports.getSample = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _waterfall_over = require('../utils/waterfall_over');

var _waterfall_over2 = _interopRequireDefault(_waterfall_over);

var _jsonlint = require('jsonlint');

var _jsonlint2 = _interopRequireDefault(_jsonlint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getSample(handle, dirname) {
  return new Promise(function (resolve, reject) {
    var shortFilename = _path2.default.join('app', 'assets', 'samples', handle + '.json');
    var filename = _path2.default.join(dirname, shortFilename);

    fs.readFile(filename, 'utf8', function (err, data) {
      if (err) {
        reject(err);
      } else {
        try {
          resolve(_jsonlint2.default.parse(data));
        } catch (err) {

          reject('Unable to load the content from ' + shortFilename + '\n' + err);
        }
      }
    });
  });
}

function getPackageName(dirname) {
  return new Promise(function (resolve, reject) {
    var filename = _path2.default.join(dirname, 'package.json');

    fs.readFile(filename, function (err, data) {
      if (err) {
        reject(err);
      } else resolve(JSON.parse(data).name);
    });
  });
}

function getTheme(dirname) {
  return new Promise(function (resolve, reject) {
    var filename = _path2.default.join(dirname, 'theme.json');

    fs.readFile(filename, function (err, data) {
      if (err) {
        reject(err);
      } else resolve(JSON.parse(data));
    });
  });
}

function _getThemes(themesDir, files) {
  return new Promise(function (resolve, reject) {
    var themes = [];

    (0, _waterfall_over2.default)(files, function (filename, next) {
      var file = _path2.default.join(themesDir, filename);
      fs.stat(file, function (err, stats) {
        if (!err) {
          if (!stats.isDirectory()) {
            next();return;
          }
          getTheme(file).then(function (theme) {
            themes.push({ name: theme.name, handle: theme.handle });
            next();
          }).catch(reject);
        } else reject(err);
      });
    }, function () {
      resolve(themes);
    });
  });
}

function getThemes(dirname) {
  return new Promise(function (resolve, reject) {
    var themesDir = _path2.default.join(dirname, 'app', 'themes');

    fs.readdir(themesDir, function (err, files) {
      if (!err) {
        _getThemes(themesDir, files).then(resolve).catch(reject);
      } else reject(err);
    });
  });
}

function getProject(dirname) {
  return getPackageName(dirname).then(function (name) {
    return getThemes(dirname).then(function (themes) {
      return [name, themes];
    });
  }).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        name = _ref2[0],
        themes = _ref2[1];

    return { name: name, themes: themes };
  }).catch(function (err) {
    console.log('Unable to load the themes');
    console.log(err);
  });
}

exports.getSample = getSample;
exports.getProject = getProject;